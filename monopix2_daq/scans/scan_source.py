import os,sys,time
import numpy as np
import bitarray
import tables as tb
import yaml

import monopix2_daq.scan_base as scan_base
from monopix2_daq.analysis import analysis_dataproc
from monopix2_daq.analysis import plotting

"""
    This scan enables the chip read-out for a defined period of time and acquires all data generated by any source during that time frame. 
"""

local_configuration={
                     "with_tlu": True,          # Enable TLU timestamping (40 & 640 MHz) in data
                     "with_inj": False,         # Enable Inj timestamping (640 MHz) in data 
                     "with_rx1": False,          # Enable RX1 timestamping (640 MHz) in data 
                     "with_mon": False,         # Enable Mon/Hit-Or timestamping (640 MHz) in data 
                     "scan_time": 10,           # Scan time (in seconds)
                     "tlu_delay": 8,            # Delay setting for the TLU (Default for standard cable length: 7 or 8)
                     "pix": [28,25],            
}

class ScanSource(scan_base.ScanBase):
    scan_id = "scan_source"
            
    def scan(self,**kwargs): 
        """
            Execute a source scan.
            This scan enables the chip read-out for a defined period of time and acquires all data generated by any source during that time frame. 
        """
        # Load kwargs or default values.
        with_tlu = kwargs.pop('with_tlu', False)
        with_inj = kwargs.pop('with_inj', True)
        with_rx1 = kwargs.pop('with_rx1', False)
        with_mon = kwargs.pop('with_mon', True)
        scan_time = kwargs.pop('scan_time', 10)

        cnt=0
        scanned=0

        # Enable pixels.
        self.monopix.set_preamp_en(pix)

        # Enable timestamps.
        if with_tlu:
            tlu_delay = kwargs.pop('tlu_delay', 8)
            self.monopix.set_tlu(tlu_delay)
            self.monopix.set_timestamp640(src="tlu")
        if with_inj:
            self.monopix.set_timestamp640(src="inj")
        if with_rx1:
            self.monopix.set_timestamp640(src="rx1")
        if with_mon:
            self.monopix.set_timestamp640(src="mon")
        
        # Start Read-out.
        self.monopix.set_monoread()
        
        with self.readout(scan_param_id=0, fill_buffer=False, clear_buffer=True, readout_interval=0.2, timeout=0):
            
            # Record the initial time.
            t_0 = time.time()

            self.logger.info("***** %s is running ***** Don't forget to start the TLU *****"%self.__class__.__name__)

            # Monitor the scan time while acquiring data.
            while True:
                pre_cnt = cnt
                cnt = self.fifo_readout.get_record_count()
                pre_scanned = scanned
                scanned = time.time()-t_0
                self.logger.info('Elapsed time = {0:.0f}s dat = {1} rate={2:.3f}k/s'.format(scanned,cnt,(cnt-pre_cnt)/(scanned-pre_scanned)/1024))
                time_step=1
                if scanned + time_step > scan_time and scan_time > 0:
                    break
                elif scanned < 30:
                    time.sleep(time_step)
                else:
                    time_step=10
                    time.sleep(time_step)

            time.sleep(max(0,scan_time-scanned))
                  
        # Stop Read-out and timestamps.
        self.monopix.stop_all_data()

    
    def analyze(self, data_file=None, cluster_hits=False, build_events=False, build_events_simple=False):
        if data_file is None:
            data_file = self.output_filename + '.h5'

        with analysis_dataproc.Analysis(raw_data_file=data_file, cluster_hits=cluster_hits, build_events=build_events, build_events_simple=build_events_simple) as a:
            a.analyze_data()
            self.analyzed_data_file = a.analyzed_data_file
        return self.analyzed_data_file

    def plot(self, analyzed_data_file=None):
        if analyzed_data_file is None:
            analyzed_data_file = self.analyzed_data_file

        with plotting.Plotting(analyzed_data_file=analyzed_data_file) as p:
            p.create_config_table()
            p.create_standard_plots()

if __name__ == "__main__":
    from monopix2_daq import monopix2
    import argparse
    
    parser = argparse.ArgumentParser(usage="python scan_source.py -t1 0.8 -t2 0.8 -t3 0.8 -f 0:44 -p -time 50",
             formatter_class=argparse.RawTextHelpFormatter)
    parser.add_argument("-conf", "--config_file", type=str, default=None)
    parser.add_argument('-t1',"--th1", type=float, default=None)
    parser.add_argument('-t2',"--th2", type=float, default=None)
    parser.add_argument('-t3',"--th3", type=float, default=None)
    parser.add_argument("-f","--flavor", type=str, default=None)
    parser.add_argument("-p","--power_reset", action='store_const', const=1, default=0) # Default = True: Skip power reset.
    parser.add_argument("-time",'--scan_time', type=int, default=None,
                        help="Scan time in seconds.")
    parser.add_argument("-dout","--output_dir", type=str, default=None)
    
    args=parser.parse_args()
    
    m=monopix2.Monopix2(no_power_reset=not bool(args.power_reset))
    m.init()
    if args.config_file is not None:
        m.load_config(args.config_file)

    m.set_inj_en(pix="none")

    if args.th1 is not None:
        m.set_th(1,args.th1)
    if args.th2 is not None:
        m.set_th(2, args.th2)
    if args.th3 is not None:
        m.set_th(3, args.th3)

    if args.flavor is not None:
        if args.flavor=="all":
            collist=range(0,m.chip_props["COL_SIZE"])
            m.logger.info("Enabled: Full matrix")
        else:
            tmp=args.flavor.split(":")
            collist=range(int(tmp[0]),int(tmp[1]))
            m.logger.info("Enabled: Columns {0:s} to {1:s}".format(tmp[0], tmp[1]))

        pix=[]
        for i in collist:
           for j in range(0,m.chip_props["ROW_SIZE"]):               
               if m.PIXEL_CONF["EnPre"][i,j]!=0:
                   pix.append([i,j])
               else:
                   pass
    else:
        pix=[]
        m.set_preamp_en(m.PIXEL_CONF["EnPre"])
        m.set_tdac(m.PIXEL_CONF["Trim"])
        
        for i in range(0,m.chip_props["COL_SIZE"]):
           for j in range(0,m.chip_props["ROW_SIZE"]):
               if m.PIXEL_CONF["EnPre"][i,j]!=0:
                   pix.append([i,j])
               else:
                   pass

    if len(pix)>0:
        local_configuration["pix"]=pix
    else:
        pass
    
    if args.scan_time is not None:
        local_configuration["scan_time"]=args.scan_time
    
    if args.output_dir is not None:
        scan = ScanSource(m, fout=args.output_dir, online_monitor_addr="tcp://127.0.0.1:6500")
    else:        
        scan = ScanSource(m,online_monitor_addr="tcp://127.0.0.1:6500")
    
    scan.start(**local_configuration)
    scan.analyze()
    scan.plot()
