import time
from tqdm import tqdm

import monopix2_daq.scan_base as scan_base
from monopix2_daq.analysis import analysis_dataproc
from monopix2_daq.analysis import plotting

"""
    This scan enables the chip read-out for a defined period of time and acquires all data generated by any source during that time frame. 
"""

local_configuration={
    "with_tlu": False,          # Enable TLU timestamping (40 & 640 MHz) in data
    "with_rx1": False,          # Enable RX1 timestamping (640 MHz) in data
    "with_mon": False,          # Enable Mon/Hit-Or timestamping (640 MHz) in data
    "monitor_pixel": None,      # Pixel to be monitored. Format: [COL,ROW]
    "scan_time": 10,            # Scan time (in seconds)
    "tlu_delay": 8,             # Delay setting for the TLU (Default for standard cable length: 7 or 8)

    "start_col": None,
    "stop_col": None,
    "start_row": None,
    "stop_row": None,
}

class ScanSource(scan_base.ScanBase):
    scan_id = "scan_source"
            
    def scan(self, with_tlu = False, with_rx1 = False, with_mon = False, monitor_pixel=None, scan_time=10, tlu_delay=8, **kwargs):
        """
            Execute a source scan.
            This scan enables the chip read-out for a defined period of time and acquires all data generated by any source during that time frame. 
        """
        cnt=0
        scanned=0

        # Enable pixels.
        self.monopix.set_preamp_en(self.enable_mask)

        # Enable monitored pixel.
        if monitor_pixel is not None:
            self.monopix.set_mon_en(monitor_pixel, overwrite=True)
        else:
            self.monopix.set_mon_en([26, 140], overwrite=True)

        # Enable timestamps.
        if with_tlu:
            self.monopix.set_tlu(tlu_delay)
            self.monopix.set_timestamp640(src="tlu")
        if with_rx1:
            self.monopix.set_timestamp640(src="rx1")
        if with_mon:
            self.monopix.set_timestamp640(src="mon")

        # Start Read-out.
        self.monopix.set_monoread()
        self.logger.info("***** %s is running ***** Don't forget to start the TLU *****"%self.__class__.__name__)

        with self.readout(scan_param_id=0, fill_buffer=False, clear_buffer=True, readout_interval=0.2, timeout=0):

            pbar = tqdm(total=scan_time, unit='seconds')
            # Record the initial time.
            t_0 = time.time()

            # Monitor the scan time while acquiring data.
            while time.time() - t_0 < scan_time:
                time.sleep(1)
                pre_cnt = cnt
                cnt = self.fifo_readout.get_record_count()
                pre_scanned = scanned
                scanned = time.time() - t_0
                data_rate = (cnt - pre_cnt) / (scanned - pre_scanned) / 1024
                self.logger.debug('Elapsed time = {0:.0f}s dat = {1} rate={2:.3f}k/s'.format(scanned, cnt, data_rate))
                pbar.set_postfix_str('Dat: {0:9} | Rate: {1:.2f}k/s'.format(cnt, data_rate))
                pbar.update(1)

        pbar.close()
        # Stop Read-out and timestamps.
        self.monopix.stop_all_data()
        self.logger.info("Mean data rate over {0}s was {1:.2f}k/s".format(scan_time, cnt / scan_time / 1024))

    def analyze(self, data_file=None, cluster_hits=False, build_events=False, build_events_simple=False):
        if data_file is None:
            data_file = self.output_filename + '.h5'

        with analysis_dataproc.Analysis(raw_data_file=data_file, cluster_hits=cluster_hits, build_events=build_events, build_events_simple=build_events_simple) as a:
            a.analyze_data()
            self.analyzed_data_file = a.analyzed_data_file
        return self.analyzed_data_file

    def plot(self, analyzed_data_file=None):
        if analyzed_data_file is None:
            analyzed_data_file = self.analyzed_data_file

        with plotting.Plotting(analyzed_data_file=analyzed_data_file) as p:
            p.create_config_table()
            p.create_standard_plots()

if __name__ == "__main__":
    from monopix2_daq import monopix2
    import argparse
    
    parser = argparse.ArgumentParser(usage="python scan_source.py -t1 0.8 -t2 0.8 -t3 0.8 -f 0:44 -p -time 50",
             formatter_class=argparse.RawTextHelpFormatter)
    parser.add_argument("-conf", "--config_file", type=str, default=None)
    parser.add_argument('-t1',"--th1", type=float, default=None)
    parser.add_argument('-t2',"--th2", type=float, default=None)
    parser.add_argument('-t3',"--th3", type=float, default=None)
    parser.add_argument("-f","--flavor", type=str, default=None)
    parser.add_argument("-p","--power_reset", action='store_const', const=1, default=0) # Default = True: Skip power reset.
    parser.add_argument("-time","--scan_time", type=int, default=local_configuration["scan_time"],
                        help="Scan time in seconds.")
    
    args=parser.parse_args()
    args.no_power_reset = not bool(args.power_reset)
    local_configuration.update(vars(args))
    
    scan = ScanSource(**local_configuration)
    scan.start(**local_configuration)
    scan.analyze()
    scan.plot()
